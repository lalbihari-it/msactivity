/**
 * 
 */
package com.ibm.vicky.login.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.netflix.ribbon.RibbonClient;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.ibm.vicky.login.service.model.AuthenticationRequest;
import com.ibm.vicky.login.service.model.AuthenticationResponse;
import com.ibm.vicky.login.service.model.UserData;
import com.ibm.vicky.login.service.model.UserRequest;
import com.ibm.vicky.login.service.util.JwtUtil;

@RestController
@RibbonClient(name = "orderms")
public class LoginServiceController {
	
	@Autowired
	private AuthenticationManager authenticationManager;

	@Autowired
	private JwtUtil jwtTokenUtil;

	@Autowired
	private UserDetailService userDetailService;

	@Autowired
	private LoginService service;
	
		
	@RequestMapping(path = "/hello", method = RequestMethod.GET)
	public String firstPage() {
		return "Welcome to LoginService";
	}
	
	
	@RequestMapping(path = "/", method = RequestMethod.GET)
	public String loginPage(Model model) {
		model.addAttribute("AuthenticationRequest", new AuthenticationRequest());
		return "login";
	}
	
	

	
	@RequestMapping(value = "/login", method = RequestMethod.POST) 
	public ResponseEntity<?> saveUser(@RequestBody UserRequest user) throws Exception {
		boolean isUserAlreadyRegistered = false;
		try {
			UserDetails userDetails = userDetailService.loadUserByUsername(user.getUserName());
			isUserAlreadyRegistered = true;
		}catch (UsernameNotFoundException e) {
			isUserAlreadyRegistered = false;
			
		}
		if(isUserAlreadyRegistered)
			throw new Exception("User name has been already registered");			
		else {
			UserData userData = userDetailService.save(user);
			//return ResponseEntity.ok(userDetailsService.save(user));
			return ResponseEntity.ok("User "+userData.getUserName() +" has been registered successfully");
		}
	}
	

	
	@RequestMapping(value = "/authorize", method = RequestMethod.POST /*, headers= {"Content-Type=application/json"}, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE*/)
	public ResponseEntity<AuthenticationResponse> createAuthenticationToken(@RequestBody AuthenticationRequest authenticationRequest) throws Exception {

		try {
			System.out.println("createAuthenticationToken:: In authorizing call.... " + authenticationRequest.getUserName() + " "+ authenticationRequest.getPassword());
			
			authenticationManager.authenticate(
					new UsernamePasswordAuthenticationToken(authenticationRequest.getUserName(), authenticationRequest.getPassword())
			);
		}
		catch (BadCredentialsException e) {
			throw new Exception("Incorrect username or password", e);
		}


		final UserDetails userDetails = userDetailService
				.loadUserByUsername(authenticationRequest.getUserName());

		final String authToken = jwtTokenUtil.generateAuthToken(userDetails);

		final String transactionToken = jwtTokenUtil.generateTxnToken(userDetails);
		
		return ResponseEntity.ok(new AuthenticationResponse(authToken,transactionToken));
	}


	//@RequestMapping(value = "/saveOrderData", method = RequestMethod.POST)
	@RequestMapping(value = "/saveOrderData", method = RequestMethod.POST)
	public String saveOrderData(@RequestBody UserRequest user) throws Exception {
		
		String orderStatus = service.saveOrderData(user);
		return orderStatus;
	}
	
}
